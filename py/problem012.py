"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
   
What is the value of the first triangle number to have over five hundred
divisors?
"""
from time import time
import unittest
try:
    unittest.TestCase.assertLess
except:
    def assertLess(self, a, b, msg=None):
        if not a < b:
            self.fail('%s not less than %s' % (repr(a), repr(b)))
    unittest.TestCase.assertLess = assertLess

class TestProblem012(unittest.TestCase):
    """Verify that problem #12 is correct and timely."""
    # pylint: disable=W0201
    def runTest(self):
        """The test itself."""
        self.start = time()
        self.assertEqual(problem012(), 76576500, "Problem #12 is wrong.")
        self.stop = time()
        self.assertLess(self.stop - self.start, 60,
            """Problem #12 takes too long.""")

def problem012():
    i = 0
    j = 0
    while len([k for k in range(1, int(j ** .5) + 1) if j % k == 0]) < 250:
        i += 1
        j += i
    return j

if __name__ == "__main__":
    start = time()
    answer = problem012()
    print(12, answer, time() - start)
